import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { useEffect, useRef, useState } from "react";
import { gsap } from "gsap";
import { ScrollTrigger } from "gsap/dist/ScrollTrigger";
import { ScrollToPlugin } from "gsap/dist/ScrollToPlugin";
import Logo from "./components/logo";
import Nav from "./components/nav";
import Poster from "./components/poster";
import Scpage from "./components/scPage";
import About from "./components/About";
import Project from "./components/Project";

import useSWR from 'swr'

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [isLoading, setIsLoading] = useState(true);
  const [isScrolling, setIsScrolling] = useState(false);
  const posterBox = useRef();
  const panel2 = useRef();
  const [data, setData ] = useState()
  useEffect(() => {

    async function fetchData(){
      const data = await fetch("/api/project")
      const result = await data.json()
      setData(result)
    }
    fetchData()

    let vh = window.innerHeight * 0.01;
    // Then we set the value in the --vh custom property to the root of the document
    window.addEventListener("reasize", (e) => {
      document.documentElement.style.setProperty("--vh", `${vh}px`);
    });
    document.documentElement.style.setProperty("--vh", `${vh}px`);

    // Register ScrollTrigger and ScrollToPlugin with gsap
    gsap.registerPlugin(ScrollTrigger, ScrollToPlugin);

    let width = window.innerWidth;
    function resize() {
      width = window.innerWidth;
    }

    ScrollTrigger.addEventListener("refreshInit", resize);
    resize();

    window.addEventListener("resize", (e) => {
      e.preventDefault();
      setTimeout(() => {
        ScrollTrigger.refresh();
      }, 1200);
    });
    // Select all elements with class .panel
    // const panels = gsap.utils.toArray(".panel");

    // // Normalize scroll for touch devices
    // const observer = ScrollTrigger.normalizeScroll(true);

    // // Tween for scrolling between sections
    // let scrollTween;

    // function goToSection(i) {
    //   scrollTween = gsap.to(window, {
    //     scrollTo: { y: i * innerHeight, autoKill: false },
    //     duration: 1,
    //     onComplete: () => (scrollTween = null),
    //     overwrite: true,
    //   });
    // }

    // // Create ScrollTrigger for each panel
    // gsap.utils.toArray(".panel").forEach((panel, i) => {
    //   ScrollTrigger.create({
    //     trigger: panel,
    // start: "top bottom-=2",
    // end: () => "+=" + (window.innerHeight * 2 - 4),
    //     onToggle: (self) => self.isActive && !scrollTween && goToSection(i),
    //   });
    // });

    // window.addEventListener("wheel", cancelWhenTweening, { passive: false });
    // window.addEventListener("scroll", cancelWhenTweening, { passive: false });
    // function cancelWhenTweening(e) {
    //   scrollTween && e.preventDefault();
    // }
    // Show loading screen for 7 seconds
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 4100);
    // console.log(props);

    return () => clearTimeout(timer);
  }, [isLoading]);

  return (
    <>
      <Head>
        <title>Md.Fahad Ali</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {isLoading && (
        <div className={styles.loading}>
          <Logo />
        </div>
      )}
      {!isLoading && (
        <div className={styles.mainbd}>
          <div className={styles.main}>
            <section className="panel">
              <Nav />
              <div className={` ${styles.posterbox}`} ref={posterBox}>
                <div className={styles.poster}>
                  <Poster />
                </div>
              </div>
            </section>

            <section className="panel panel2">
              <Scpage />
            </section>
            <section className="panel">
              <About />
            </section>
            <section className="panel">
              <Project data={data}/>
            </section>
            <section className="panel">FOUR</section>
          </div>
        </div>
      )}
    </>
  );
}

// export async function getStaticProps({ req, res }) {
//   console.log(req.headers.referer);
//   try {
//     const data = await fetch(`${req.headers.referer}api/project`)
//     const final = await data.json()
//     console.log(final);
//     return {
//       props: {
//         data: "",
//       },
//     };
    
//   } catch (error) {
//     console.log(error);
//     return {
//       props: {
//         data: "",
//       },
//     };
//   }
// }
